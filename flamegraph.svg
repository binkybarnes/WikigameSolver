<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="309.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="309.00"> </text><svg id="frames" x="10" width="1180" total_samples="2339"><g><title>dyld4::prepare(dyld4::APIs&amp;, dyld3::MachOAnalyzer const*) (1 samples, 0.04%)</title><rect x="0.0000%" y="245" width="0.0428%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="255.50"></text></g><g><title>dyld4::JustInTimeLoader::applyFixups(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::DyldCacheDataConstLazyScopedWriter&amp;, bool) const (1 samples, 0.04%)</title><rect x="0.0000%" y="229" width="0.0428%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="239.50"></text></g><g><title>dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.04%)</title><rect x="0.0000%" y="213" width="0.0428%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="223.50"></text></g><g><title>dyld3::MachOAnalyzer::withVMLayout(Diagnostics&amp;, void (mach_o::Layout const&amp;) block_pointer) const (1 samples, 0.04%)</title><rect x="0.0000%" y="197" width="0.0428%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="207.50"></text></g><g><title>invocation function for block in dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.04%)</title><rect x="0.0000%" y="181" width="0.0428%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="191.50"></text></g><g><title>mach_o::Fixups::forEachBindTarget_ChainedFixups(Diagnostics&amp;, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.04%)</title><rect x="0.0000%" y="165" width="0.0428%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="175.50"></text></g><g><title>dyld3::MachOFile::forEachChainedFixupTarget(Diagnostics&amp;, dyld_chained_fixups_header const*, linkedit_data_command const*, void (int, char const*, unsigned long long, bool, bool&amp;) block_pointer) (1 samples, 0.04%)</title><rect x="0.0000%" y="149" width="0.0428%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="159.50"></text></g><g><title>invocation function for block in mach_o::Fixups::forEachBindTarget_ChainedFixups(Diagnostics&amp;, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.04%)</title><rect x="0.0000%" y="133" width="0.0428%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="143.50"></text></g><g><title>invocation function for block in dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.04%)</title><rect x="0.0000%" y="117" width="0.0428%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="127.50"></text></g><g><title>dyld4::Loader::resolveSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, int, char const*, bool, bool, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool) const (1 samples, 0.04%)</title><rect x="0.0000%" y="101" width="0.0428%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="111.50"></text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (1 samples, 0.04%)</title><rect x="0.0000%" y="85" width="0.0428%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="95.50"></text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (1 samples, 0.04%)</title><rect x="0.0000%" y="69" width="0.0428%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="79.50"></text></g><g><title>dyld3::Array&lt;dyld4::Loader const*&gt;::push_back(dyld4::Loader const* const&amp;) (1 samples, 0.04%)</title><rect x="0.0000%" y="53" width="0.0428%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="1"/><text x="0.2500%" y="63.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.04%)</title><rect x="0.0428%" y="117" width="0.0428%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="1"/><text x="0.2928%" y="127.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.04%)</title><rect x="0.0428%" y="101" width="0.0428%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="1"/><text x="0.2928%" y="111.50"></text></g><g><title>large_malloc (1 samples, 0.04%)</title><rect x="0.0428%" y="85" width="0.0428%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="1"/><text x="0.2928%" y="95.50"></text></g><g><title>mvm_allocate_pages_plat (1 samples, 0.04%)</title><rect x="0.0428%" y="69" width="0.0428%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="1"/><text x="0.2928%" y="79.50"></text></g><g><title>mach_vm_map (1 samples, 0.04%)</title><rect x="0.0428%" y="53" width="0.0428%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="1"/><text x="0.2928%" y="63.50"></text></g><g><title>_kernelrpc_mach_vm_map_trap (1 samples, 0.04%)</title><rect x="0.0428%" y="37" width="0.0428%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="1"/><text x="0.2928%" y="47.50"></text></g><g><title>read (1 samples, 0.04%)</title><rect x="0.0855%" y="117" width="0.0428%" height="15" fill="rgb(226,26,5)" fg:x="2" fg:w="1"/><text x="0.3355%" y="127.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_to_end (9 samples, 0.38%)</title><rect x="0.0428%" y="149" width="0.3848%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="9"/><text x="0.2928%" y="159.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_to_end (9 samples, 0.38%)</title><rect x="0.0428%" y="133" width="0.3848%" height="15" fill="rgb(235,183,28)" fg:x="1" fg:w="9"/><text x="0.2928%" y="143.50"></text></g><g><title>std::io::default_read_to_end (7 samples, 0.30%)</title><rect x="0.1283%" y="117" width="0.2993%" height="15" fill="rgb(221,5,38)" fg:x="3" fg:w="7"/><text x="0.3783%" y="127.50"></text></g><g><title>read (7 samples, 0.30%)</title><rect x="0.1283%" y="101" width="0.2993%" height="15" fill="rgb(247,18,42)" fg:x="3" fg:w="7"/><text x="0.3783%" y="111.50"></text></g><g><title>madvise (4 samples, 0.17%)</title><rect x="0.4275%" y="117" width="0.1710%" height="15" fill="rgb(241,131,45)" fg:x="10" fg:w="4"/><text x="0.6775%" y="127.50"></text></g><g><title>_szone_free (8 samples, 0.34%)</title><rect x="0.4275%" y="149" width="0.3420%" height="15" fill="rgb(249,31,29)" fg:x="10" fg:w="8"/><text x="0.6775%" y="159.50"></text></g><g><title>free_large (8 samples, 0.34%)</title><rect x="0.4275%" y="133" width="0.3420%" height="15" fill="rgb(225,111,53)" fg:x="10" fg:w="8"/><text x="0.6775%" y="143.50"></text></g><g><title>mvm_deallocate_plat (4 samples, 0.17%)</title><rect x="0.5985%" y="117" width="0.1710%" height="15" fill="rgb(238,160,17)" fg:x="14" fg:w="4"/><text x="0.8485%" y="127.50"></text></g><g><title>mach_vm_deallocate (4 samples, 0.17%)</title><rect x="0.5985%" y="101" width="0.1710%" height="15" fill="rgb(214,148,48)" fg:x="14" fg:w="4"/><text x="0.8485%" y="111.50"></text></g><g><title>_kernelrpc_mach_vm_deallocate_trap (4 samples, 0.17%)</title><rect x="0.5985%" y="85" width="0.1710%" height="15" fill="rgb(232,36,49)" fg:x="14" fg:w="4"/><text x="0.8485%" y="95.50"></text></g><g><title>&lt;bitcode::str::StrDecoder as bitcode::coder::View&gt;::populate (146 samples, 6.24%)</title><rect x="0.7696%" y="133" width="6.2420%" height="15" fill="rgb(209,103,24)" fg:x="18" fg:w="146"/><text x="1.0196%" y="143.50">&lt;bitcode..</text></g><g><title>core::str::converts::from_utf8 (108 samples, 4.62%)</title><rect x="2.3942%" y="117" width="4.6174%" height="15" fill="rgb(229,88,8)" fg:x="56" fg:w="108"/><text x="2.6442%" y="127.50">core:..</text></g><g><title>DYLD-STUB$$malloc (3 samples, 0.13%)</title><rect x="9.6195%" y="101" width="0.1283%" height="15" fill="rgb(213,181,19)" fg:x="225" fg:w="3"/><text x="9.8695%" y="111.50"></text></g><g><title>DYLD-STUB$$memcpy (4 samples, 0.17%)</title><rect x="9.7478%" y="101" width="0.1710%" height="15" fill="rgb(254,191,54)" fg:x="228" fg:w="4"/><text x="9.9978%" y="111.50"></text></g><g><title>__rdl_alloc (9 samples, 0.38%)</title><rect x="9.9188%" y="101" width="0.3848%" height="15" fill="rgb(241,83,37)" fg:x="232" fg:w="9"/><text x="10.1688%" y="111.50"></text></g><g><title>_malloc_zone_malloc (14 samples, 0.60%)</title><rect x="10.3035%" y="101" width="0.5985%" height="15" fill="rgb(233,36,39)" fg:x="241" fg:w="14"/><text x="10.5535%" y="111.50"></text></g><g><title>_platform_memmove (59 samples, 2.52%)</title><rect x="10.9021%" y="101" width="2.5224%" height="15" fill="rgb(226,3,54)" fg:x="255" fg:w="59"/><text x="11.1521%" y="111.50">_p..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (137 samples, 5.86%)</title><rect x="13.4245%" y="101" width="5.8572%" height="15" fill="rgb(245,192,40)" fg:x="314" fg:w="137"/><text x="13.6745%" y="111.50">hashbro..</text></g><g><title>rack_get_thread_index (6 samples, 0.26%)</title><rect x="20.0086%" y="85" width="0.2565%" height="15" fill="rgb(238,167,29)" fg:x="468" fg:w="6"/><text x="20.2586%" y="95.50"></text></g><g><title>tiny_malloc_from_free_list (16 samples, 0.68%)</title><rect x="20.2651%" y="85" width="0.6841%" height="15" fill="rgb(232,182,51)" fg:x="474" fg:w="16"/><text x="20.5151%" y="95.50"></text></g><g><title>rack_get_thread_index (5 samples, 0.21%)</title><rect x="22.8730%" y="69" width="0.2138%" height="15" fill="rgb(231,60,39)" fg:x="535" fg:w="5"/><text x="23.1230%" y="79.50"></text></g><g><title>set_tiny_meta_header_in_use (18 samples, 0.77%)</title><rect x="23.0868%" y="69" width="0.7696%" height="15" fill="rgb(208,69,12)" fg:x="540" fg:w="18"/><text x="23.3368%" y="79.50"></text></g><g><title>szone_malloc_should_clear (219 samples, 9.36%)</title><rect x="19.2817%" y="101" width="9.3630%" height="15" fill="rgb(235,93,37)" fg:x="451" fg:w="219"/><text x="19.5317%" y="111.50">szone_malloc_..</text></g><g><title>tiny_malloc_should_clear (180 samples, 7.70%)</title><rect x="20.9491%" y="85" width="7.6956%" height="15" fill="rgb(213,116,39)" fg:x="490" fg:w="180"/><text x="21.1991%" y="95.50">tiny_malloc..</text></g><g><title>tiny_malloc_from_free_list (112 samples, 4.79%)</title><rect x="23.8563%" y="69" width="4.7884%" height="15" fill="rgb(222,207,29)" fg:x="558" fg:w="112"/><text x="24.1063%" y="79.50">tiny_m..</text></g><g><title>set_tiny_meta_header_in_use (9 samples, 0.38%)</title><rect x="28.2599%" y="53" width="0.3848%" height="15" fill="rgb(206,96,30)" fg:x="661" fg:w="9"/><text x="28.5099%" y="63.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (469 samples, 20.05%)</title><rect x="8.9354%" y="117" width="20.0513%" height="15" fill="rgb(218,138,4)" fg:x="209" fg:w="469"/><text x="9.1854%" y="127.50">&lt;core::iter::adapters::map::Map..</text></g><g><title>tiny_malloc_should_clear (8 samples, 0.34%)</title><rect x="28.6447%" y="101" width="0.3420%" height="15" fill="rgb(250,191,14)" fg:x="670" fg:w="8"/><text x="28.8947%" y="111.50"></text></g><g><title>DYLD-STUB$$malloc (1 samples, 0.04%)</title><rect x="29.4998%" y="101" width="0.0428%" height="15" fill="rgb(239,60,40)" fg:x="690" fg:w="1"/><text x="29.7498%" y="111.50"></text></g><g><title>DYLD-STUB$$memcpy (12 samples, 0.51%)</title><rect x="29.5425%" y="101" width="0.5130%" height="15" fill="rgb(206,27,48)" fg:x="691" fg:w="12"/><text x="29.7925%" y="111.50"></text></g><g><title>__rdl_alloc (15 samples, 0.64%)</title><rect x="30.0556%" y="101" width="0.6413%" height="15" fill="rgb(225,35,8)" fg:x="703" fg:w="15"/><text x="30.3056%" y="111.50"></text></g><g><title>_malloc_zone_malloc (28 samples, 1.20%)</title><rect x="30.6969%" y="101" width="1.1971%" height="15" fill="rgb(250,213,24)" fg:x="718" fg:w="28"/><text x="30.9469%" y="111.50"></text></g><g><title>_platform_memmove (198 samples, 8.47%)</title><rect x="31.8940%" y="101" width="8.4652%" height="15" fill="rgb(247,123,22)" fg:x="746" fg:w="198"/><text x="32.1440%" y="111.50">_platform_me..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (156 samples, 6.67%)</title><rect x="40.3591%" y="101" width="6.6695%" height="15" fill="rgb(231,138,38)" fg:x="944" fg:w="156"/><text x="40.6091%" y="111.50">hashbrown..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.09%)</title><rect x="47.0286%" y="101" width="0.0855%" height="15" fill="rgb(231,145,46)" fg:x="1100" fg:w="2"/><text x="47.2786%" y="111.50"></text></g><g><title>_platform_memset (2 samples, 0.09%)</title><rect x="47.0286%" y="85" width="0.0855%" height="15" fill="rgb(251,118,11)" fg:x="1100" fg:w="2"/><text x="47.2786%" y="95.50"></text></g><g><title>tiny_malloc_from_free_list (10 samples, 0.43%)</title><rect x="47.9692%" y="85" width="0.4275%" height="15" fill="rgb(217,147,25)" fg:x="1122" fg:w="10"/><text x="48.2192%" y="95.50"></text></g><g><title>rack_get_thread_index (12 samples, 0.51%)</title><rect x="50.5772%" y="69" width="0.5130%" height="15" fill="rgb(247,81,37)" fg:x="1183" fg:w="12"/><text x="50.8272%" y="79.50"></text></g><g><title>szone_malloc_should_clear (244 samples, 10.43%)</title><rect x="47.1142%" y="101" width="10.4318%" height="15" fill="rgb(209,12,38)" fg:x="1102" fg:w="244"/><text x="47.3642%" y="111.50">szone_malloc_sh..</text></g><g><title>tiny_malloc_should_clear (214 samples, 9.15%)</title><rect x="48.3968%" y="85" width="9.1492%" height="15" fill="rgb(227,1,9)" fg:x="1132" fg:w="214"/><text x="48.6468%" y="95.50">tiny_malloc_s..</text></g><g><title>tiny_malloc_from_free_list (151 samples, 6.46%)</title><rect x="51.0902%" y="69" width="6.4558%" height="15" fill="rgb(248,47,43)" fg:x="1195" fg:w="151"/><text x="51.3402%" y="79.50">tiny_mal..</text></g><g><title>set_tiny_meta_header_in_use (34 samples, 1.45%)</title><rect x="56.0923%" y="53" width="1.4536%" height="15" fill="rgb(221,10,30)" fg:x="1312" fg:w="34"/><text x="56.3423%" y="63.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (675 samples, 28.86%)</title><rect x="28.9867%" y="117" width="28.8585%" height="15" fill="rgb(210,229,1)" fg:x="678" fg:w="675"/><text x="29.2367%" y="127.50">&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::ite..</text></g><g><title>tiny_malloc_should_clear (7 samples, 0.30%)</title><rect x="57.5460%" y="101" width="0.2993%" height="15" fill="rgb(222,148,37)" fg:x="1346" fg:w="7"/><text x="57.7960%" y="111.50"></text></g><g><title>_malloc_zone_malloc (19 samples, 0.81%)</title><rect x="57.8452%" y="117" width="0.8123%" height="15" fill="rgb(234,67,33)" fg:x="1353" fg:w="19"/><text x="58.0952%" y="127.50"></text></g><g><title>_platform_memmove (165 samples, 7.05%)</title><rect x="58.6575%" y="117" width="7.0543%" height="15" fill="rgb(247,98,35)" fg:x="1372" fg:w="165"/><text x="58.9075%" y="127.50">_platform..</text></g><g><title>_platform_memset (2 samples, 0.09%)</title><rect x="65.7118%" y="117" width="0.0855%" height="15" fill="rgb(247,138,52)" fg:x="1537" fg:w="2"/><text x="65.9618%" y="127.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (706 samples, 30.18%)</title><rect x="65.7973%" y="117" width="30.1838%" height="15" fill="rgb(213,79,30)" fg:x="1539" fg:w="706"/><text x="66.0473%" y="127.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (15 samples, 0.64%)</title><rect x="95.9812%" y="117" width="0.6413%" height="15" fill="rgb(246,177,23)" fg:x="2245" fg:w="15"/><text x="96.2312%" y="127.50"></text></g><g><title>_platform_memset (15 samples, 0.64%)</title><rect x="95.9812%" y="101" width="0.6413%" height="15" fill="rgb(230,62,27)" fg:x="2245" fg:w="15"/><text x="96.2312%" y="111.50"></text></g><g><title>bitcode::derive::decode_inline_never (2,100 samples, 89.78%)</title><rect x="7.0115%" y="133" width="89.7820%" height="15" fill="rgb(216,154,8)" fg:x="164" fg:w="2100"/><text x="7.2615%" y="143.50">bitcode::derive::decode_inline_never</text></g><g><title>szone_malloc_should_clear (4 samples, 0.17%)</title><rect x="96.6225%" y="117" width="0.1710%" height="15" fill="rgb(244,35,45)" fg:x="2260" fg:w="4"/><text x="96.8725%" y="127.50"></text></g><g><title>all (2,339 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(251,115,12)" fg:x="0" fg:w="2339"/><text x="0.2500%" y="287.50"></text></g><g><title>start (2,339 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(240,54,50)" fg:x="0" fg:w="2339"/><text x="0.2500%" y="271.50">start</text></g><g><title>main (2,338 samples, 99.96%)</title><rect x="0.0428%" y="245" width="99.9572%" height="15" fill="rgb(233,84,52)" fg:x="1" fg:w="2338"/><text x="0.2928%" y="255.50">main</text></g><g><title>std::rt::lang_start_internal (2,338 samples, 99.96%)</title><rect x="0.0428%" y="229" width="99.9572%" height="15" fill="rgb(207,117,47)" fg:x="1" fg:w="2338"/><text x="0.2928%" y="239.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (2,338 samples, 99.96%)</title><rect x="0.0428%" y="213" width="99.9572%" height="15" fill="rgb(249,43,39)" fg:x="1" fg:w="2338"/><text x="0.2928%" y="223.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (2,338 samples, 99.96%)</title><rect x="0.0428%" y="197" width="99.9572%" height="15" fill="rgb(209,38,44)" fg:x="1" fg:w="2338"/><text x="0.2928%" y="207.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>rusting::main (2,338 samples, 99.96%)</title><rect x="0.0428%" y="181" width="99.9572%" height="15" fill="rgb(236,212,23)" fg:x="1" fg:w="2338"/><text x="0.2928%" y="191.50">rusting::main</text></g><g><title>rusting::util::load_from_file (2,338 samples, 99.96%)</title><rect x="0.0428%" y="165" width="99.9572%" height="15" fill="rgb(242,79,21)" fg:x="1" fg:w="2338"/><text x="0.2928%" y="175.50">rusting::util::load_from_file</text></g><g><title>bitcode::derive::decode (2,321 samples, 99.23%)</title><rect x="0.7696%" y="149" width="99.2304%" height="15" fill="rgb(211,96,35)" fg:x="18" fg:w="2321"/><text x="1.0196%" y="159.50">bitcode::derive::decode</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (75 samples, 3.21%)</title><rect x="96.7935%" y="133" width="3.2065%" height="15" fill="rgb(253,215,40)" fg:x="2264" fg:w="75"/><text x="97.0435%" y="143.50">has..</text></g></svg></svg>